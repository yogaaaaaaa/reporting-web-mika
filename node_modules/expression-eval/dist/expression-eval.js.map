{"version":3,"file":"expression-eval.js","sources":["../index.ts"],"sourcesContent":["import jsep from 'jsep';\n\n/**\n * Evaluation code from JSEP project, under MIT License.\n * Copyright (c) 2013 Stephen Oney, http://jsep.from.so/\n */\n\n// Default operator precedence from https://github.com/EricSmekens/jsep/blob/master/src/jsep.js#L55\nconst DEFAULT_PRECEDENCE = {\n  '||': 1,\n  '&&': 2,\n  '|': 3,\n  '^': 4,\n  '&': 5,\n  '==': 6,\n  '!=': 6,\n  '===': 6,\n  '!==': 6,\n  '<': 7,\n  '>': 7,\n  '<=': 7,\n  '>=': 7,\n  '<<': 8,\n  '>>': 8,\n  '>>>': 8,\n  '+': 9,\n  '-': 9,\n  '*': 10,\n  '/': 10,\n  '%': 10\n};\n\nconst binops = {\n  '||': function (a, b) { return a || b; },\n  '&&': function (a, b) { return a && b; },\n  '|': function (a, b) { return a | b; },\n  '^': function (a, b) { return a ^ b; },\n  '&': function (a, b) { return a & b; },\n  '==': function (a, b) { return a == b; }, // jshint ignore:line\n  '!=': function (a, b) { return a != b; }, // jshint ignore:line\n  '===': function (a, b) { return a === b; },\n  '!==': function (a, b) { return a !== b; },\n  '<': function (a, b) { return a < b; },\n  '>': function (a, b) { return a > b; },\n  '<=': function (a, b) { return a <= b; },\n  '>=': function (a, b) { return a >= b; },\n  '<<': function (a, b) { return a << b; },\n  '>>': function (a, b) { return a >> b; },\n  '>>>': function (a, b) { return a >>> b; },\n  '+': function (a, b) { return a + b; },\n  '-': function (a, b) { return a - b; },\n  '*': function (a, b) { return a * b; },\n  '/': function (a, b) { return a / b; },\n  '%': function (a, b) { return a % b; }\n};\n\nconst unops = {\n  '-': function (a) { return -a; },\n  '+': function (a) { return +a; },\n  '~': function (a) { return ~a; },\n  '!': function (a) { return !a; },\n};\n\ndeclare type operand = number | string;\ndeclare type unaryCallback = (a: operand) => operand;\ndeclare type binaryCallback = (a: operand, b: operand) => operand;\n\ntype AnyExpression = jsep.ArrayExpression\n  | jsep.BinaryExpression\n  | jsep.MemberExpression\n  | jsep.CallExpression\n  | jsep.ConditionalExpression\n  | jsep.Identifier\n  | jsep.Literal\n  | jsep.LogicalExpression\n  | jsep.ThisExpression\n  | jsep.UnaryExpression;\n\nfunction evaluateArray(list, context) {\n  return list.map(function (v) { return evaluate(v, context); });\n}\n\nasync function evaluateArrayAsync(list, context) {\n  const res = await Promise.all(list.map((v) => evalAsync(v, context)));\n  return res;\n}\n\nfunction evaluateMember(node: jsep.MemberExpression, context: object) {\n  const object = evaluate(node.object, context);\n  if (node.computed) {\n    return [object, object[evaluate(node.property, context)]];\n  } else {\n    return [object, object[(node.property as jsep.Identifier).name]];\n  }\n}\n\nasync function evaluateMemberAsync(node: jsep.MemberExpression, context: object) {\n  const object = await evalAsync(node.object, context);\n  if (node.computed) {\n    return [object, object[await evalAsync(node.property, context)]];\n  } else {\n    return [object, object[(node.property as jsep.Identifier).name]];\n  }\n}\n\nfunction evaluate(_node: jsep.Expression, context: object) {\n\n  const node = _node as AnyExpression;\n\n  switch (node.type) {\n\n    case 'ArrayExpression':\n      return evaluateArray(node.elements, context);\n\n    case 'BinaryExpression':\n      return binops[node.operator](evaluate(node.left, context), evaluate(node.right, context));\n\n    case 'CallExpression':\n      let caller, fn, assign;\n      if (node.callee.type === 'MemberExpression') {\n        assign = evaluateMember(node.callee as jsep.MemberExpression, context);\n        caller = assign[0];\n        fn = assign[1];\n      } else {\n        fn = evaluate(node.callee, context);\n      }\n      if (typeof fn !== 'function') { return undefined; }\n      return fn.apply(caller, evaluateArray(node.arguments, context));\n\n    case 'ConditionalExpression':\n      return evaluate(node.test, context)\n        ? evaluate(node.consequent, context)\n        : evaluate(node.alternate, context);\n\n    case 'Identifier':\n      return context[node.name];\n\n    case 'Literal':\n      return node.value;\n\n    case 'LogicalExpression':\n      if (node.operator === '||') {\n        return evaluate(node.left, context) || evaluate(node.right, context);\n      } else if (node.operator === '&&') {\n        return evaluate(node.left, context) && evaluate(node.right, context);\n      }\n      return binops[node.operator](evaluate(node.left, context), evaluate(node.right, context));\n\n    case 'MemberExpression':\n      return evaluateMember(node, context)[1];\n\n    case 'ThisExpression':\n      return context;\n\n    case 'UnaryExpression':\n      return unops[node.operator](evaluate(node.argument, context));\n\n    default:\n      return undefined;\n  }\n\n}\n\nasync function evalAsync(_node: jsep.Expression, context: object) {\n\n  const node = _node as AnyExpression;\n\n  // Brackets used for some case blocks here, to avoid edge cases related to variable hoisting.\n  // See: https://stackoverflow.com/questions/57759348/const-and-let-variable-shadowing-in-a-switch-statement\n  switch (node.type) {\n\n    case 'ArrayExpression':\n      return await evaluateArrayAsync(node.elements, context);\n\n    case 'BinaryExpression': {\n      const [left, right] = await Promise.all([\n        evalAsync(node.left, context),\n        evalAsync(node.right, context)\n      ]);\n      return binops[node.operator](left, right);\n    }\n\n    case 'CallExpression': {\n      let caller, fn, assign;\n      if (node.callee.type === 'MemberExpression') {\n        assign = await evaluateMemberAsync(node.callee as jsep.MemberExpression, context);\n        caller = assign[0];\n        fn = assign[1];\n      } else {\n        fn = await evalAsync(node.callee, context);\n      }\n      if (typeof fn !== 'function') {\n        return undefined;\n      }\n      return await fn.apply(\n        caller,\n        await evaluateArrayAsync(node.arguments, context)\n      );\n    }\n\n    case 'ConditionalExpression':\n      return (await evalAsync(node.test, context))\n        ? await evalAsync(node.consequent, context)\n        : await evalAsync(node.alternate, context);\n\n    case 'Identifier':\n      return context[node.name];\n\n    case 'Literal':\n      return node.value;\n\n    case 'LogicalExpression': {\n      if (node.operator === '||') {\n        return (\n          (await evalAsync(node.left, context)) ||\n          (await evalAsync(node.right, context))\n        );\n      } else if (node.operator === '&&') {\n        return (\n          (await evalAsync(node.left, context)) &&\n          (await evalAsync(node.right, context))\n        );\n      }\n\n      const [left, right] = await Promise.all([\n        evalAsync(node.left, context),\n        evalAsync(node.right, context)\n      ]);\n\n      return binops[node.operator](left, right);\n    }\n\n    case 'MemberExpression':\n      return (await evaluateMemberAsync(node, context))[1];\n\n    case 'ThisExpression':\n      return context;\n\n    case 'UnaryExpression':\n      return unops[node.operator](await evalAsync(node.argument, context));\n\n    default:\n      return undefined;\n  }\n}\n\nfunction compile(expression: string | jsep.Expression): (context: object) => any {\n  return evaluate.bind(null, jsep(expression));\n}\n\nfunction compileAsync(expression: string | jsep.Expression): (context: object) => Promise<any> {\n  return evalAsync.bind(null, jsep(expression));\n}\n\n// Added functions to inject Custom Unary Operators (and override existing ones)\nfunction addUnaryOp(operator: string, _function: unaryCallback): void {\n  jsep.addUnaryOp(operator);\n  unops[operator] = _function;\n}\n\n// Added functions to inject Custom Binary Operators (and override existing ones)\nfunction addBinaryOp(operator: string, precedence_or_fn: number | binaryCallback, _function: binaryCallback): void {\n  if (_function) {\n    jsep.addBinaryOp(operator, precedence_or_fn as number);\n    binops[operator] = _function;\n  } else {\n    jsep.addBinaryOp(operator, DEFAULT_PRECEDENCE[operator] || 1);\n    binops[operator] = precedence_or_fn;\n  }\n}\n\nexport {\n  jsep as parse,\n  evaluate as eval,\n  evalAsync,\n  compile,\n  compileAsync,\n  addUnaryOp,\n  addBinaryOp\n};\n"],"names":["evalAsync","_node","context","node","type","evaluateArrayAsync","elements","Promise","all","left","right","binops","operator","caller","fn","assign","_fn","apply","arguments","callee","evaluateMemberAsync","test","consequent","alternate","name","value","unops","argument","undefined","object","computed","property","list","map","v","DEFAULT_PRECEDENCE","||","&&","|","^","&","==","!=","===","!==","<",">","<=",">=","<<",">>",">>>","+","-","*","/","%","a","b","~","!","evaluateArray","evaluate","evaluateMember","precedence_or_fn","_function","jsep","addBinaryOp","addUnaryOp","expression","bind"],"mappings":"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"}